export declare const NueContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string | string[]>;
            default: string;
        };
        id: {
            type: import('vue').PropType<string>;
            default: string;
        };
        height: {
            type: import('vue').PropType<string>;
        };
        width: {
            type: import('vue').PropType<string>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        theme: string | string[];
        id: string;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string | string[]>;
            default: string;
        };
        id: {
            type: import('vue').PropType<string>;
            default: string;
        };
        height: {
            type: import('vue').PropType<string>;
        };
        width: {
            type: import('vue').PropType<string>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, {
        theme: string | string[];
        id: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    theme: {
        type: import('vue').PropType<string | string[]>;
        default: string;
    };
    id: {
        type: import('vue').PropType<string>;
        default: string;
    };
    height: {
        type: import('vue').PropType<string>;
    };
    width: {
        type: import('vue').PropType<string>;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    theme: string | string[];
    id: string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
export declare const NueHeader: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        width: {
            type: import('vue').PropType<string>;
        };
        height: {
            type: import('vue').PropType<string>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        width: {
            type: import('vue').PropType<string>;
        };
        height: {
            type: import('vue').PropType<string>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    width: {
        type: import('vue').PropType<string>;
    };
    height: {
        type: import('vue').PropType<string>;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        logo?(_: {}): any;
        nav?(_: {}): any;
        navigators?(_: {}): any;
        default?(_: {}): any;
        ops?(_: {}): any;
        actions?(_: {}): any;
        user?(_: {}): any;
    };
}) & import('vue').Plugin;
export declare const NueMain: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        responsive: {
            type: import('vue').PropType<boolean>;
        };
        asideWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        asideMinWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        asideMaxWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        allowResizeAside: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        allowCollapseAside: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        allowHideAside: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        outlineWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        outlineMinWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        outlineMaxWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        allowResizeOutline: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        allowCollapseOutline: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        allowHideOutline: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{
        "onAfter-aside-resize"?: ((payload: {
            oldWidth: number;
            newWidth: number;
        }) => any) | undefined;
        "onAfter-outline-resize"?: ((payload: {
            oldWidth: number;
            newWidth: number;
        }) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "after-aside-resize": (payload: {
            oldWidth: number;
            newWidth: number;
        }) => void;
        "after-outline-resize": (payload: {
            oldWidth: number;
            newWidth: number;
        }) => void;
    }, import('vue').PublicProps, {
        asideWidth: string;
        asideMinWidth: string;
        asideMaxWidth: string;
        allowResizeAside: boolean;
        allowCollapseAside: boolean;
        allowHideAside: boolean;
        outlineWidth: string;
        outlineMinWidth: string;
        outlineMaxWidth: string;
        allowResizeOutline: boolean;
        allowCollapseOutline: boolean;
        allowHideOutline: boolean;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        responsive: {
            type: import('vue').PropType<boolean>;
        };
        asideWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        asideMinWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        asideMaxWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        allowResizeAside: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        allowCollapseAside: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        allowHideAside: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        outlineWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        outlineMinWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        outlineMaxWidth: {
            type: import('vue').PropType<string>;
            default: string;
        };
        allowResizeOutline: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        allowCollapseOutline: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        allowHideOutline: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{
        "onAfter-aside-resize"?: ((payload: {
            oldWidth: number;
            newWidth: number;
        }) => any) | undefined;
        "onAfter-outline-resize"?: ((payload: {
            oldWidth: number;
            newWidth: number;
        }) => any) | undefined;
    }>, {}, {}, {}, {}, {
        asideWidth: string;
        asideMinWidth: string;
        asideMaxWidth: string;
        allowResizeAside: boolean;
        allowCollapseAside: boolean;
        allowHideAside: boolean;
        outlineWidth: string;
        outlineMinWidth: string;
        outlineMaxWidth: string;
        allowResizeOutline: boolean;
        allowCollapseOutline: boolean;
        allowHideOutline: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    responsive: {
        type: import('vue').PropType<boolean>;
    };
    asideWidth: {
        type: import('vue').PropType<string>;
        default: string;
    };
    asideMinWidth: {
        type: import('vue').PropType<string>;
        default: string;
    };
    asideMaxWidth: {
        type: import('vue').PropType<string>;
        default: string;
    };
    allowResizeAside: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    allowCollapseAside: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    allowHideAside: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    outlineWidth: {
        type: import('vue').PropType<string>;
        default: string;
    };
    outlineMinWidth: {
        type: import('vue').PropType<string>;
        default: string;
    };
    outlineMaxWidth: {
        type: import('vue').PropType<string>;
        default: string;
    };
    allowResizeOutline: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    allowCollapseOutline: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    allowHideOutline: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
}>> & Readonly<{
    "onAfter-aside-resize"?: ((payload: {
        oldWidth: number;
        newWidth: number;
    }) => any) | undefined;
    "onAfter-outline-resize"?: ((payload: {
        oldWidth: number;
        newWidth: number;
    }) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "after-aside-resize": (payload: {
        oldWidth: number;
        newWidth: number;
    }) => void;
    "after-outline-resize": (payload: {
        oldWidth: number;
        newWidth: number;
    }) => void;
}, string, {
    asideWidth: string;
    asideMinWidth: string;
    asideMaxWidth: string;
    allowResizeAside: boolean;
    allowCollapseAside: boolean;
    allowHideAside: boolean;
    outlineWidth: string;
    outlineMinWidth: string;
    outlineMaxWidth: string;
    allowResizeOutline: boolean;
    allowCollapseOutline: boolean;
    allowHideOutline: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        aside?(_: {}): any;
        default?(_: {}): any;
        content?(_: {}): any;
        outline?(_: {}): any;
        columns?(_: {}): any;
    };
}) & import('vue').Plugin;
export declare const NueFooter: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        width: {
            type: import('vue').PropType<string>;
        };
        height: {
            type: import('vue').PropType<string>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        width: {
            type: import('vue').PropType<string>;
        };
        height: {
            type: import('vue').PropType<string>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    width: {
        type: import('vue').PropType<string>;
    };
    height: {
        type: import('vue').PropType<string>;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
export type * from './types';
