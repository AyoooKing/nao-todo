import { LinkProps } from './types';

export declare const NueLink: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<string>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        icon: {
            type: import('vue').PropType<import('index').IconNameType>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        align: {
            type: import('vue').PropType<string>;
        };
        flex: {
            type: import('vue').PropType<string>;
        };
        href: {
            type: import('vue').PropType<string>;
        };
        route: {
            type: import('vue').PropType<string | {
                name: string;
                params?: Record<string, unknown>;
                query?: Record<string, unknown>;
                meta?: Record<string, unknown>;
            }>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<string>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        icon: {
            type: import('vue').PropType<import('index').IconNameType>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        align: {
            type: import('vue').PropType<string>;
        };
        flex: {
            type: import('vue').PropType<string>;
        };
        href: {
            type: import('vue').PropType<string>;
        };
        route: {
            type: import('vue').PropType<string | {
                name: string;
                params?: Record<string, unknown>;
                query?: Record<string, unknown>;
                meta?: Record<string, unknown>;
            }>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: import('vue').PropType<string>;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    icon: {
        type: import('vue').PropType<import('index').IconNameType>;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
    };
    align: {
        type: import('vue').PropType<string>;
    };
    flex: {
        type: import('vue').PropType<string>;
    };
    href: {
        type: import('vue').PropType<string>;
    };
    route: {
        type: import('vue').PropType<string | {
            name: string;
            params?: Record<string, unknown>;
            query?: Record<string, unknown>;
            meta?: Record<string, unknown>;
        }>;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
        append?(_: {}): any;
    };
}) & import('vue').Plugin;
export type { LinkProps };
