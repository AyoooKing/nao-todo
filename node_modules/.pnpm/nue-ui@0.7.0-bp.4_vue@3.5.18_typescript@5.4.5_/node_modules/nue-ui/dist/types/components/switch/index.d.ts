export declare const NueSwitch: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        loading: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        modelValue: {
            type: import('vue').PropType<boolean>;
        };
        showText: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        activeText: {
            type: import('vue').PropType<string>;
            default: string;
        };
        inactiveText: {
            type: import('vue').PropType<string>;
            default: string;
        };
        beforeSwitch: {
            type: import('vue').PropType<(value: boolean) => Promise<boolean | void> | boolean | void>;
        };
    }>> & Readonly<{
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        onChange?: ((value: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:modelValue": (value: boolean) => void;
        change: (value: boolean) => void;
    }, import('vue').PublicProps, {
        loading: boolean;
        disabled: boolean;
        showText: boolean;
        activeText: string;
        inactiveText: string;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        loading: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        modelValue: {
            type: import('vue').PropType<boolean>;
        };
        showText: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        activeText: {
            type: import('vue').PropType<string>;
            default: string;
        };
        inactiveText: {
            type: import('vue').PropType<string>;
            default: string;
        };
        beforeSwitch: {
            type: import('vue').PropType<(value: boolean) => Promise<boolean | void> | boolean | void>;
        };
    }>> & Readonly<{
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        onChange?: ((value: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, {
        loading: boolean;
        disabled: boolean;
        showText: boolean;
        activeText: string;
        inactiveText: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: import('vue').PropType<"small" | "large">;
    };
    loading: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: import('vue').PropType<boolean>;
    };
    showText: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    activeText: {
        type: import('vue').PropType<string>;
        default: string;
    };
    inactiveText: {
        type: import('vue').PropType<string>;
        default: string;
    };
    beforeSwitch: {
        type: import('vue').PropType<(value: boolean) => Promise<boolean | void> | boolean | void>;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onChange?: ((value: boolean) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: boolean) => void;
    change: (value: boolean) => void;
}, string, {
    loading: boolean;
    disabled: boolean;
    showText: boolean;
    activeText: string;
    inactiveText: string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
