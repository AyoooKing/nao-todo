export declare const NueCheckboxGroup: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        name: {
            type: import('vue').PropType<string>;
        };
        max: {
            type: import('vue').PropType<number>;
            default: number;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        modelValue: {
            type: import('vue').PropType<(string | undefined)[]>;
        };
        useController: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        controllerLabel: {
            type: import('vue').PropType<string>;
        };
        min: {
            type: import('vue').PropType<number>;
            default: number;
        };
    }>> & Readonly<{
        "onUpdate:modelValue"?: ((value: (string | undefined)[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:modelValue": (value: (string | undefined)[]) => void;
    }, import('vue').PublicProps, {
        max: number;
        disabled: boolean;
        useController: boolean;
        min: number;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        name: {
            type: import('vue').PropType<string>;
        };
        max: {
            type: import('vue').PropType<number>;
            default: number;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        modelValue: {
            type: import('vue').PropType<(string | undefined)[]>;
        };
        useController: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        controllerLabel: {
            type: import('vue').PropType<string>;
        };
        min: {
            type: import('vue').PropType<number>;
            default: number;
        };
    }>> & Readonly<{
        "onUpdate:modelValue"?: ((value: (string | undefined)[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        max: number;
        disabled: boolean;
        useController: boolean;
        min: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: import('vue').PropType<"small" | "large">;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    name: {
        type: import('vue').PropType<string>;
    };
    max: {
        type: import('vue').PropType<number>;
        default: number;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: import('vue').PropType<(string | undefined)[]>;
    };
    useController: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    controllerLabel: {
        type: import('vue').PropType<string>;
    };
    min: {
        type: import('vue').PropType<number>;
        default: number;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((value: (string | undefined)[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: (string | undefined)[]) => void;
}, string, {
    max: number;
    disabled: boolean;
    useController: boolean;
    min: number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        controller?(_: {
            controllerState: boolean;
            isIndeterminate: boolean;
        }): any;
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
