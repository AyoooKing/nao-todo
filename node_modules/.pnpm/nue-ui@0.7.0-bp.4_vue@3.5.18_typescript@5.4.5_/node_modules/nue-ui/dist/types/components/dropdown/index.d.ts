import { NueDropdownProps, NueDropdownEmits } from './types';

export declare const NueDropdown: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        text: {
            type: import('vue').PropType<string>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        placement: {
            type: import('vue').PropType<"top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "right-start" | "right-center" | "right-end" | "left-start" | "left-center" | "left-end">;
            default: string;
        };
        hideOnClick: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        dropType: {
            type: import('vue').PropType<"click" | "hover">;
            default: string;
        };
        triggerText: {
            type: import('vue').PropType<string>;
        };
        keepAlive: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        hideOnClicked: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        nesting: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        beforeExecute: {
            type: import('vue').PropType<() => void>;
        };
        afterExecute: {
            type: import('vue').PropType<() => void>;
        };
    }>> & Readonly<{
        onExecute?: ((value: string) => any) | undefined;
    }>, {
        visible: import('vue').ComputedRef<boolean>;
        show: (e?: MouseEvent) => void;
        hide: (e?: MouseEvent) => void;
        toggle: (e?: MouseEvent) => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        execute: (value: string) => void;
    }, import('vue').PublicProps, {
        disabled: boolean;
        placement: "top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "right-start" | "right-center" | "right-end" | "left-start" | "left-center" | "left-end";
        hideOnClick: boolean;
        dropType: "click" | "hover";
        keepAlive: boolean;
        hideOnClicked: boolean;
        nesting: boolean;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        text: {
            type: import('vue').PropType<string>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        placement: {
            type: import('vue').PropType<"top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "right-start" | "right-center" | "right-end" | "left-start" | "left-center" | "left-end">;
            default: string;
        };
        hideOnClick: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        dropType: {
            type: import('vue').PropType<"click" | "hover">;
            default: string;
        };
        triggerText: {
            type: import('vue').PropType<string>;
        };
        keepAlive: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        hideOnClicked: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        nesting: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        beforeExecute: {
            type: import('vue').PropType<() => void>;
        };
        afterExecute: {
            type: import('vue').PropType<() => void>;
        };
    }>> & Readonly<{
        onExecute?: ((value: string) => any) | undefined;
    }>, {
        visible: import('vue').ComputedRef<boolean>;
        show: (e?: MouseEvent) => void;
        hide: (e?: MouseEvent) => void;
        toggle: (e?: MouseEvent) => void;
    }, {}, {}, {}, {
        disabled: boolean;
        placement: "top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "right-start" | "right-center" | "right-end" | "left-start" | "left-center" | "left-end";
        hideOnClick: boolean;
        dropType: "click" | "hover";
        keepAlive: boolean;
        hideOnClicked: boolean;
        nesting: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: import('vue').PropType<"small" | "large">;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    text: {
        type: import('vue').PropType<string>;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    placement: {
        type: import('vue').PropType<"top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "right-start" | "right-center" | "right-end" | "left-start" | "left-center" | "left-end">;
        default: string;
    };
    hideOnClick: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    dropType: {
        type: import('vue').PropType<"click" | "hover">;
        default: string;
    };
    triggerText: {
        type: import('vue').PropType<string>;
    };
    keepAlive: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    hideOnClicked: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    nesting: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    beforeExecute: {
        type: import('vue').PropType<() => void>;
    };
    afterExecute: {
        type: import('vue').PropType<() => void>;
    };
}>> & Readonly<{
    onExecute?: ((value: string) => any) | undefined;
}>, {
    visible: import('vue').ComputedRef<boolean>;
    show: (e?: MouseEvent) => void;
    hide: (e?: MouseEvent) => void;
    toggle: (e?: MouseEvent) => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    execute: (value: string) => void;
}, string, {
    disabled: boolean;
    placement: "top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "right-start" | "right-center" | "right-end" | "left-start" | "left-center" | "left-end";
    hideOnClick: boolean;
    dropType: "click" | "hover";
    keepAlive: boolean;
    hideOnClicked: boolean;
    nesting: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {
            clickTrigger: (e: MouseEvent) => void;
            toggle: (e?: MouseEvent) => void;
        }): any;
        dropdown?(_: {}): any;
    };
}) & import('vue').Plugin;
export type { NueDropdownProps, NueDropdownEmits };
export type { NueDropdownProps as DropdownPropsType, NueDropdownEmits as DropdownEmitsType };
