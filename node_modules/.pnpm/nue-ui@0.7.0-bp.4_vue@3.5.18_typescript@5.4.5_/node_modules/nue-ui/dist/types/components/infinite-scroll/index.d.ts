import { InfiniteScrollPropsType, InfiniteScrollEmitsType } from './types';

export declare const NueInfiniteScroll: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        loading: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        height: {
            type: import('vue').PropType<string>;
        };
        triggerHeight: {
            type: import('vue').PropType<string>;
            default: string;
        };
        root: {
            type: import('vue').PropType<Element | Document | "wrapper" | null>;
        };
        rootMargin: {
            type: import('vue').PropType<string>;
        };
        threshold: {
            type: import('vue').PropType<number | number[]>;
        };
    }>> & Readonly<{
        onLoadMore?: (() => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        loadMore: () => void;
    }, import('vue').PublicProps, {
        loading: boolean;
        disabled: boolean;
        triggerHeight: string;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        loading: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        height: {
            type: import('vue').PropType<string>;
        };
        triggerHeight: {
            type: import('vue').PropType<string>;
            default: string;
        };
        root: {
            type: import('vue').PropType<Element | Document | "wrapper" | null>;
        };
        rootMargin: {
            type: import('vue').PropType<string>;
        };
        threshold: {
            type: import('vue').PropType<number | number[]>;
        };
    }>> & Readonly<{
        onLoadMore?: (() => any) | undefined;
    }>, {}, {}, {}, {}, {
        loading: boolean;
        disabled: boolean;
        triggerHeight: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    loading: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    height: {
        type: import('vue').PropType<string>;
    };
    triggerHeight: {
        type: import('vue').PropType<string>;
        default: string;
    };
    root: {
        type: import('vue').PropType<Element | Document | "wrapper" | null>;
    };
    rootMargin: {
        type: import('vue').PropType<string>;
    };
    threshold: {
        type: import('vue').PropType<number | number[]>;
    };
}>> & Readonly<{
    onLoadMore?: (() => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    loadMore: () => void;
}, string, {
    loading: boolean;
    disabled: boolean;
    triggerHeight: string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
        loading?(_: {}): any;
        disabled?(_: {}): any;
    };
}) & import('vue').Plugin;
export type { InfiniteScrollPropsType, InfiniteScrollEmitsType };
