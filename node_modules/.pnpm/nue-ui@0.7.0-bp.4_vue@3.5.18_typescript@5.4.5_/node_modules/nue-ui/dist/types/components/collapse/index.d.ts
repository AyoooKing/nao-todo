export declare const NueCollapse: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        modelValue: {
            type: import('vue').PropType<import('./types').ActivedCollpaseItems>;
        };
        accordion: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{
        "onUpdate:modelValue"?: ((value: import('./types').ActivedCollpaseItems) => any) | undefined;
    }>, {
        activedItems: import('vue').Ref<string | string[], string[] | import('./types').ActivedCollpaseItems>;
        pushActivedItem: (item: import('./types').CollapseItemName) => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:modelValue": (value: import('./types').ActivedCollpaseItems) => void;
    }, import('vue').PublicProps, {
        accordion: boolean;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        modelValue: {
            type: import('vue').PropType<import('./types').ActivedCollpaseItems>;
        };
        accordion: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{
        "onUpdate:modelValue"?: ((value: import('./types').ActivedCollpaseItems) => any) | undefined;
    }>, {
        activedItems: import('vue').Ref<string | string[], string[] | import('./types').ActivedCollpaseItems>;
        pushActivedItem: (item: import('./types').CollapseItemName) => void;
    }, {}, {}, {}, {
        accordion: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    modelValue: {
        type: import('vue').PropType<import('./types').ActivedCollpaseItems>;
    };
    accordion: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((value: import('./types').ActivedCollpaseItems) => any) | undefined;
}>, {
    activedItems: import('vue').Ref<string | string[], string[] | import('./types').ActivedCollpaseItems>;
    pushActivedItem: (item: import('./types').CollapseItemName) => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: import('./types').ActivedCollpaseItems) => void;
}, string, {
    accordion: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
export declare const NueCollapseItem: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        name: {
            type: import('vue').PropType<string | number>;
        };
        title: {
            type: import('vue').PropType<string>;
            default: string;
        };
        hideWhenEmpty: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        name: import('vue').ComputedRef<string>;
        isCollapsed: import('vue').ComputedRef<boolean>;
        handleCollapse: () => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        title: string;
        hideWhenEmpty: boolean;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        name: {
            type: import('vue').PropType<string | number>;
        };
        title: {
            type: import('vue').PropType<string>;
            default: string;
        };
        hideWhenEmpty: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        name: import('vue').ComputedRef<string>;
        isCollapsed: import('vue').ComputedRef<boolean>;
        handleCollapse: () => void;
    }, {}, {}, {}, {
        title: string;
        hideWhenEmpty: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    name: {
        type: import('vue').PropType<string | number>;
    };
    title: {
        type: import('vue').PropType<string>;
        default: string;
    };
    hideWhenEmpty: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
}>> & Readonly<{}>, {
    name: import('vue').ComputedRef<string>;
    isCollapsed: import('vue').ComputedRef<boolean>;
    handleCollapse: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    title: string;
    hideWhenEmpty: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        header?(_: {
            collapse: () => void;
            state: boolean;
        }): any;
        title?(_: {}): any;
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
