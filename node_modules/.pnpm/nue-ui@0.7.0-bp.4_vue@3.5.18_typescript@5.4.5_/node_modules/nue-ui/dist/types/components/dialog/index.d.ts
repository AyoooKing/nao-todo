import { DialogPropsType, DialogEmitsType } from './types';

export declare const NueDialog: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string>;
        };
        title: {
            type: import('vue').PropType<string>;
            default: string;
        };
        modelValue: {
            type: import('vue').PropType<boolean>;
        };
        width: {
            type: import('vue').PropType<string>;
        };
        minWidth: {
            type: import('vue').PropType<string>;
        };
        closable: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        beforeConfirm: {
            type: import('vue').PropType<import('./types').DialogBeforeConfirmType>;
        };
    }>> & Readonly<{
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        onConfirm?: (() => any) | undefined;
    }>, {
        close: () => Promise<true | undefined>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:modelValue": (value: boolean) => void;
        confirm: () => void;
    }, import('vue').PublicProps, {
        title: string;
        closable: boolean;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string>;
        };
        title: {
            type: import('vue').PropType<string>;
            default: string;
        };
        modelValue: {
            type: import('vue').PropType<boolean>;
        };
        width: {
            type: import('vue').PropType<string>;
        };
        minWidth: {
            type: import('vue').PropType<string>;
        };
        closable: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        beforeConfirm: {
            type: import('vue').PropType<import('./types').DialogBeforeConfirmType>;
        };
    }>> & Readonly<{
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        onConfirm?: (() => any) | undefined;
    }>, {
        close: () => Promise<true | undefined>;
    }, {}, {}, {}, {
        title: string;
        closable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    theme: {
        type: import('vue').PropType<string>;
    };
    title: {
        type: import('vue').PropType<string>;
        default: string;
    };
    modelValue: {
        type: import('vue').PropType<boolean>;
    };
    width: {
        type: import('vue').PropType<string>;
    };
    minWidth: {
        type: import('vue').PropType<string>;
    };
    closable: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    beforeConfirm: {
        type: import('vue').PropType<import('./types').DialogBeforeConfirmType>;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onConfirm?: (() => any) | undefined;
}>, {
    close: () => Promise<true | undefined>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: boolean) => void;
    confirm: () => void;
}, string, {
    title: string;
    closable: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        header?(_: {
            close: () => Promise<true | undefined>;
        }): any;
        default?(_: {}): any;
        footer?(_: {
            cancel: () => Promise<true | undefined>;
            confirm: () => Promise<void>;
        }): any;
    };
}) & import('vue').Plugin;
export type { DialogPropsType, DialogEmitsType };
