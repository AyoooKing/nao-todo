import { ButtonPropsType, ButtonEmitsType, ButtonSize } from './types';

export declare const NueButton: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<ButtonSize>;
        };
        loading: {
            type: import('vue').PropType<boolean>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        flat: {
            type: import('vue').PropType<boolean>;
        };
        icon: {
            type: import('vue').PropType<import('index').IconNameType>;
        };
        type: {
            type: import('vue').PropType<"button" | "submit" | "reset">;
            default: string;
        };
        title: {
            type: import('vue').PropType<string>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        loadingIcon: {
            type: import('vue').PropType<import('index').IconNameType>;
            default: string;
        };
        align: {
            type: import('vue').PropType<string>;
        };
        flex: {
            type: import('vue').PropType<string>;
        };
        useThrottle: {
            type: import('vue').PropType<boolean>;
        };
        throttleDuration: {
            type: import('vue').PropType<number>;
            default: number;
        };
    }>> & Readonly<{
        onClick?: ((payload: MouseEvent) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        click: (payload: MouseEvent) => void;
    }, import('vue').PublicProps, {
        type: "submit" | "reset" | "button";
        loadingIcon: import('index').IconNameType;
        throttleDuration: number;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<ButtonSize>;
        };
        loading: {
            type: import('vue').PropType<boolean>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        flat: {
            type: import('vue').PropType<boolean>;
        };
        icon: {
            type: import('vue').PropType<import('index').IconNameType>;
        };
        type: {
            type: import('vue').PropType<"button" | "submit" | "reset">;
            default: string;
        };
        title: {
            type: import('vue').PropType<string>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        loadingIcon: {
            type: import('vue').PropType<import('index').IconNameType>;
            default: string;
        };
        align: {
            type: import('vue').PropType<string>;
        };
        flex: {
            type: import('vue').PropType<string>;
        };
        useThrottle: {
            type: import('vue').PropType<boolean>;
        };
        throttleDuration: {
            type: import('vue').PropType<number>;
            default: number;
        };
    }>> & Readonly<{
        onClick?: ((payload: MouseEvent) => any) | undefined;
    }>, {}, {}, {}, {}, {
        type: "submit" | "reset" | "button";
        loadingIcon: import('index').IconNameType;
        throttleDuration: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: import('vue').PropType<ButtonSize>;
    };
    loading: {
        type: import('vue').PropType<boolean>;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    flat: {
        type: import('vue').PropType<boolean>;
    };
    icon: {
        type: import('vue').PropType<import('index').IconNameType>;
    };
    type: {
        type: import('vue').PropType<"button" | "submit" | "reset">;
        default: string;
    };
    title: {
        type: import('vue').PropType<string>;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
    };
    loadingIcon: {
        type: import('vue').PropType<import('index').IconNameType>;
        default: string;
    };
    align: {
        type: import('vue').PropType<string>;
    };
    flex: {
        type: import('vue').PropType<string>;
    };
    useThrottle: {
        type: import('vue').PropType<boolean>;
    };
    throttleDuration: {
        type: import('vue').PropType<number>;
        default: number;
    };
}>> & Readonly<{
    onClick?: ((payload: MouseEvent) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    click: (payload: MouseEvent) => void;
}, string, {
    type: "submit" | "reset" | "button";
    loadingIcon: import('index').IconNameType;
    throttleDuration: number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        prepend?(_: {}): any;
        default?(_: {}): any;
        append?(_: {}): any;
    };
}) & import('vue').Plugin;
export type { ButtonPropsType, ButtonEmitsType, ButtonSize };
