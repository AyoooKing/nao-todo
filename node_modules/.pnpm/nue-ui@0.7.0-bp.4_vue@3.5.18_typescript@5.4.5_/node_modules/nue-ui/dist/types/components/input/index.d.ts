import { InputPropsType, InputType, InputCounterType, InputEmitsType, InputShapeType, TextareaPropsType } from './types';

export declare const NueInput: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        name: {
            type: import('vue').PropType<string>;
        };
        icon: {
            type: import('vue').PropType<import('index').IconNameType>;
        };
        type: {
            type: import('vue').PropType<InputType>;
            default: string;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        flex: {
            type: import('vue').PropType<string>;
        };
        modelValue: {
            type: import('vue').PropType<string | number>;
        };
        id: {
            type: import('vue').PropType<string>;
        };
        width: {
            type: import('vue').PropType<string>;
        };
        maxlength: {
            type: import('vue').PropType<string>;
        };
        shape: {
            type: import('vue').PropType<import('index').ShapeProp>;
        };
        placeholder: {
            type: import('vue').PropType<string>;
        };
        readonly: {
            type: import('vue').PropType<boolean>;
        };
        clearable: {
            type: import('vue').PropType<boolean>;
        };
        allowShowPassword: {
            type: import('vue').PropType<boolean>;
        };
        counter: {
            type: import('vue').PropType<InputCounterType>;
            default: string;
        };
        debounceTime: {
            type: import('vue').PropType<number>;
            default: number;
        };
    }>> & Readonly<{
        onInput?: ((value: Event) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        onChange?: ((value: Event) => any) | undefined;
        onBlur?: ((value: Event) => any) | undefined;
    }>, {
        innerInputRef: import('vue').Ref<HTMLInputElement | undefined, HTMLInputElement | undefined>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:modelValue": (value: string) => void;
        input: (value: Event) => void;
        blur: (value: Event) => void;
        change: (value: Event) => void;
    }, import('vue').PublicProps, {
        type: InputType;
        counter: InputCounterType;
        debounceTime: number;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        name: {
            type: import('vue').PropType<string>;
        };
        icon: {
            type: import('vue').PropType<import('index').IconNameType>;
        };
        type: {
            type: import('vue').PropType<InputType>;
            default: string;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        flex: {
            type: import('vue').PropType<string>;
        };
        modelValue: {
            type: import('vue').PropType<string | number>;
        };
        id: {
            type: import('vue').PropType<string>;
        };
        width: {
            type: import('vue').PropType<string>;
        };
        maxlength: {
            type: import('vue').PropType<string>;
        };
        shape: {
            type: import('vue').PropType<import('index').ShapeProp>;
        };
        placeholder: {
            type: import('vue').PropType<string>;
        };
        readonly: {
            type: import('vue').PropType<boolean>;
        };
        clearable: {
            type: import('vue').PropType<boolean>;
        };
        allowShowPassword: {
            type: import('vue').PropType<boolean>;
        };
        counter: {
            type: import('vue').PropType<InputCounterType>;
            default: string;
        };
        debounceTime: {
            type: import('vue').PropType<number>;
            default: number;
        };
    }>> & Readonly<{
        onInput?: ((value: Event) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        onChange?: ((value: Event) => any) | undefined;
        onBlur?: ((value: Event) => any) | undefined;
    }>, {
        innerInputRef: import('vue').Ref<HTMLInputElement | undefined, HTMLInputElement | undefined>;
    }, {}, {}, {}, {
        type: InputType;
        counter: InputCounterType;
        debounceTime: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: import('vue').PropType<"small" | "large">;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    name: {
        type: import('vue').PropType<string>;
    };
    icon: {
        type: import('vue').PropType<import('index').IconNameType>;
    };
    type: {
        type: import('vue').PropType<InputType>;
        default: string;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
    };
    flex: {
        type: import('vue').PropType<string>;
    };
    modelValue: {
        type: import('vue').PropType<string | number>;
    };
    id: {
        type: import('vue').PropType<string>;
    };
    width: {
        type: import('vue').PropType<string>;
    };
    maxlength: {
        type: import('vue').PropType<string>;
    };
    shape: {
        type: import('vue').PropType<import('index').ShapeProp>;
    };
    placeholder: {
        type: import('vue').PropType<string>;
    };
    readonly: {
        type: import('vue').PropType<boolean>;
    };
    clearable: {
        type: import('vue').PropType<boolean>;
    };
    allowShowPassword: {
        type: import('vue').PropType<boolean>;
    };
    counter: {
        type: import('vue').PropType<InputCounterType>;
        default: string;
    };
    debounceTime: {
        type: import('vue').PropType<number>;
        default: number;
    };
}>> & Readonly<{
    onInput?: ((value: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
    onChange?: ((value: Event) => any) | undefined;
    onBlur?: ((value: Event) => any) | undefined;
}>, {
    innerInputRef: import('vue').Ref<HTMLInputElement | undefined, HTMLInputElement | undefined>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: string) => void;
    input: (value: Event) => void;
    blur: (value: Event) => void;
    change: (value: Event) => void;
}, string, {
    type: InputType;
    counter: InputCounterType;
    debounceTime: number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export declare const NueTextarea: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        flex: {
            type: import('vue').PropType<string>;
        };
        modelValue: {
            type: import('vue').PropType<string>;
        };
        id: {
            type: import('vue').PropType<string>;
        };
        width: {
            type: import('vue').PropType<string>;
        };
        resize: {
            type: import('vue').PropType<boolean>;
        };
        maxlength: {
            type: import('vue').PropType<string>;
        };
        shape: {
            type: import('vue').PropType<InputShapeType>;
        };
        placeholder: {
            type: import('vue').PropType<string>;
        };
        readonly: {
            type: import('vue').PropType<boolean>;
        };
        counter: {
            type: import('vue').PropType<InputCounterType>;
            default: string;
        };
        debounceTime: {
            type: import('vue').PropType<number>;
            default: number;
        };
        rows: {
            type: import('vue').PropType<number>;
        };
        autosize: {
            type: import('vue').PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
        };
    }>> & Readonly<{
        onInput?: ((value: Event) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        onChange?: ((value: Event) => any) | undefined;
        onBlur?: ((value: Event) => any) | undefined;
    }>, {
        innerInputRef: import('vue').Ref<any, any>;
        backendTextareaRef: import('vue').Ref<any, any>;
        update: () => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:modelValue": (value: string) => void;
        input: (value: Event) => void;
        blur: (value: Event) => void;
        change: (value: Event) => void;
    }, import('vue').PublicProps, {
        counter: InputCounterType;
        debounceTime: number;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        flex: {
            type: import('vue').PropType<string>;
        };
        modelValue: {
            type: import('vue').PropType<string>;
        };
        id: {
            type: import('vue').PropType<string>;
        };
        width: {
            type: import('vue').PropType<string>;
        };
        resize: {
            type: import('vue').PropType<boolean>;
        };
        maxlength: {
            type: import('vue').PropType<string>;
        };
        shape: {
            type: import('vue').PropType<InputShapeType>;
        };
        placeholder: {
            type: import('vue').PropType<string>;
        };
        readonly: {
            type: import('vue').PropType<boolean>;
        };
        counter: {
            type: import('vue').PropType<InputCounterType>;
            default: string;
        };
        debounceTime: {
            type: import('vue').PropType<number>;
            default: number;
        };
        rows: {
            type: import('vue').PropType<number>;
        };
        autosize: {
            type: import('vue').PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
        };
    }>> & Readonly<{
        onInput?: ((value: Event) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        onChange?: ((value: Event) => any) | undefined;
        onBlur?: ((value: Event) => any) | undefined;
    }>, {
        innerInputRef: import('vue').Ref<any, any>;
        backendTextareaRef: import('vue').Ref<any, any>;
        update: () => void;
    }, {}, {}, {}, {
        counter: InputCounterType;
        debounceTime: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: import('vue').PropType<"small" | "large">;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
    };
    flex: {
        type: import('vue').PropType<string>;
    };
    modelValue: {
        type: import('vue').PropType<string>;
    };
    id: {
        type: import('vue').PropType<string>;
    };
    width: {
        type: import('vue').PropType<string>;
    };
    resize: {
        type: import('vue').PropType<boolean>;
    };
    maxlength: {
        type: import('vue').PropType<string>;
    };
    shape: {
        type: import('vue').PropType<InputShapeType>;
    };
    placeholder: {
        type: import('vue').PropType<string>;
    };
    readonly: {
        type: import('vue').PropType<boolean>;
    };
    counter: {
        type: import('vue').PropType<InputCounterType>;
        default: string;
    };
    debounceTime: {
        type: import('vue').PropType<number>;
        default: number;
    };
    rows: {
        type: import('vue').PropType<number>;
    };
    autosize: {
        type: import('vue').PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
    };
}>> & Readonly<{
    onInput?: ((value: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
    onChange?: ((value: Event) => any) | undefined;
    onBlur?: ((value: Event) => any) | undefined;
}>, {
    innerInputRef: import('vue').Ref<any, any>;
    backendTextareaRef: import('vue').Ref<any, any>;
    update: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: string) => void;
    input: (value: Event) => void;
    blur: (value: Event) => void;
    change: (value: Event) => void;
}, string, {
    counter: InputCounterType;
    debounceTime: number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export type { InputPropsType, InputType, InputCounterType, InputEmitsType, InputShapeType, TextareaPropsType };
