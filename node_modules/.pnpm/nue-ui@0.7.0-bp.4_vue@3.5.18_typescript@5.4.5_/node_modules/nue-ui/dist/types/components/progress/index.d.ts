export declare const NueProgress: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        color: {
            type: import('vue').PropType<string | string[]>;
            default: string;
        };
        type: {
            type: import('vue').PropType<import('index').ProgressType>;
            default: string;
        };
        percentage: {
            type: import('vue').PropType<number>;
            default: number;
        };
        strokeWidth: {
            type: import('vue').PropType<number>;
            default: number;
        };
        formatter: {
            type: import('vue').PropType<(p: string) => void | string>;
            default: (p: string) => string;
        };
        showInnerText: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        hideText: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        scale: {
            type: import('vue').PropType<number>;
            default: number;
        };
    }>> & Readonly<{
        onFull?: (() => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        full: () => void;
    }, import('vue').PublicProps, {
        color: string | string[];
        type: import('index').ProgressType;
        percentage: number;
        strokeWidth: number;
        formatter: (p: string) => void | string;
        showInnerText: boolean;
        hideText: boolean;
        scale: number;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        color: {
            type: import('vue').PropType<string | string[]>;
            default: string;
        };
        type: {
            type: import('vue').PropType<import('index').ProgressType>;
            default: string;
        };
        percentage: {
            type: import('vue').PropType<number>;
            default: number;
        };
        strokeWidth: {
            type: import('vue').PropType<number>;
            default: number;
        };
        formatter: {
            type: import('vue').PropType<(p: string) => void | string>;
            default: (p: string) => string;
        };
        showInnerText: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        hideText: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        scale: {
            type: import('vue').PropType<number>;
            default: number;
        };
    }>> & Readonly<{
        onFull?: (() => any) | undefined;
    }>, {}, {}, {}, {}, {
        color: string | string[];
        type: import('index').ProgressType;
        percentage: number;
        strokeWidth: number;
        formatter: (p: string) => void | string;
        showInnerText: boolean;
        hideText: boolean;
        scale: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    color: {
        type: import('vue').PropType<string | string[]>;
        default: string;
    };
    type: {
        type: import('vue').PropType<import('index').ProgressType>;
        default: string;
    };
    percentage: {
        type: import('vue').PropType<number>;
        default: number;
    };
    strokeWidth: {
        type: import('vue').PropType<number>;
        default: number;
    };
    formatter: {
        type: import('vue').PropType<(p: string) => void | string>;
        default: (p: string) => string;
    };
    showInnerText: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    hideText: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    scale: {
        type: import('vue').PropType<number>;
        default: number;
    };
}>> & Readonly<{
    onFull?: (() => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    full: () => void;
}, string, {
    color: string | string[];
    type: import('index').ProgressType;
    percentage: number;
    strokeWidth: number;
    formatter: (p: string) => void | string;
    showInnerText: boolean;
    hideText: boolean;
    scale: number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & import('vue').Plugin;
export * from './types';
