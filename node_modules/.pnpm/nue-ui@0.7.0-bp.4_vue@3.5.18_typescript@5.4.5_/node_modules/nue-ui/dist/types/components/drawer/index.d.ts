import { DrawerPropsType } from './types';

export declare const NueDrawer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        visible: import('vue').PropType<any>;
        span: {
            type: import('vue').PropType<string>;
            default: string;
        };
        title: {
            type: import('vue').PropType<string>;
        };
        minSpan: {
            type: import('vue').PropType<string>;
            default: string;
        };
        beforeClose: {
            type: import('vue').PropType<import('./types').DrawerBeforeCloseType>;
        };
        closeByButtonOnly: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        openFrom: {
            type: import('vue').PropType<"left" | "right" | "top" | "bottom">;
            default: string;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        span: string;
        minSpan: string;
        closeByButtonOnly: boolean;
        openFrom: "left" | "right" | "top" | "bottom";
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        visible: import('vue').PropType<any>;
        span: {
            type: import('vue').PropType<string>;
            default: string;
        };
        title: {
            type: import('vue').PropType<string>;
        };
        minSpan: {
            type: import('vue').PropType<string>;
            default: string;
        };
        beforeClose: {
            type: import('vue').PropType<import('./types').DrawerBeforeCloseType>;
        };
        closeByButtonOnly: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        openFrom: {
            type: import('vue').PropType<"left" | "right" | "top" | "bottom">;
            default: string;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, {
        span: string;
        minSpan: string;
        closeByButtonOnly: boolean;
        openFrom: "left" | "right" | "top" | "bottom";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    visible: import('vue').PropType<any>;
    span: {
        type: import('vue').PropType<string>;
        default: string;
    };
    title: {
        type: import('vue').PropType<string>;
    };
    minSpan: {
        type: import('vue').PropType<string>;
        default: string;
    };
    beforeClose: {
        type: import('vue').PropType<import('./types').DrawerBeforeCloseType>;
    };
    closeByButtonOnly: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    openFrom: {
        type: import('vue').PropType<"left" | "right" | "top" | "bottom">;
        default: string;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    span: string;
    minSpan: string;
    closeByButtonOnly: boolean;
    openFrom: "left" | "right" | "top" | "bottom";
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        header?(_: {
            close: () => Promise<void>;
        }): any;
        default?(_: {}): any;
        footer?(_: {}): any;
    };
}) & import('vue').Plugin;
export type { DrawerPropsType };
