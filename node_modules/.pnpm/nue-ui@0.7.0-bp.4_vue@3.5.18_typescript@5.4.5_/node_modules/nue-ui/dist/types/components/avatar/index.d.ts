import { AvatarProps, AvatarEmits } from './types';

export declare const NueAvatar: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<string>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        icon: {
            type: import('vue').PropType<import('index').IconNameType>;
        };
        title: {
            type: import('vue').PropType<string>;
        };
        src: {
            type: import('vue').PropType<string>;
        };
        fit: {
            type: import('vue').PropType<import('./types').ObjectFit>;
        };
        rounded: {
            type: import('vue').PropType<boolean>;
        };
        alt: {
            type: import('vue').PropType<string>;
        };
    }>> & Readonly<{
        onError?: ((val: Event) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        error: (val: Event) => void;
    }, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<string>;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        icon: {
            type: import('vue').PropType<import('index').IconNameType>;
        };
        title: {
            type: import('vue').PropType<string>;
        };
        src: {
            type: import('vue').PropType<string>;
        };
        fit: {
            type: import('vue').PropType<import('./types').ObjectFit>;
        };
        rounded: {
            type: import('vue').PropType<boolean>;
        };
        alt: {
            type: import('vue').PropType<string>;
        };
    }>> & Readonly<{
        onError?: ((val: Event) => any) | undefined;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: import('vue').PropType<string>;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    icon: {
        type: import('vue').PropType<import('index').IconNameType>;
    };
    title: {
        type: import('vue').PropType<string>;
    };
    src: {
        type: import('vue').PropType<string>;
    };
    fit: {
        type: import('vue').PropType<import('./types').ObjectFit>;
    };
    rounded: {
        type: import('vue').PropType<boolean>;
    };
    alt: {
        type: import('vue').PropType<string>;
    };
}>> & Readonly<{
    onError?: ((val: Event) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    error: (val: Event) => void;
}, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
}) & import('vue').Plugin;
export type { AvatarProps, AvatarEmits };
