export declare const NueTooltip: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        content: {
            type: import('vue').PropType<string>;
            required: true;
            default: string;
        };
        placement: {
            type: import('vue').PropType<"top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "right-start" | "right-center" | "right-end" | "left-start" | "left-center" | "left-end">;
            default: string;
        };
        showTriangle: {
            type: import('vue').PropType<boolean>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        content: string;
        placement: "top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "left-start" | "left-center" | "left-end" | "right-start" | "right-center" | "right-end";
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: import('vue').PropType<"small" | "large">;
        };
        theme: {
            type: import('vue').PropType<string | string[]>;
        };
        content: {
            type: import('vue').PropType<string>;
            required: true;
            default: string;
        };
        placement: {
            type: import('vue').PropType<"top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "right-start" | "right-center" | "right-end" | "left-start" | "left-center" | "left-end">;
            default: string;
        };
        showTriangle: {
            type: import('vue').PropType<boolean>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, {
        content: string;
        placement: "top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "left-start" | "left-center" | "left-end" | "right-start" | "right-center" | "right-end";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: import('vue').PropType<"small" | "large">;
    };
    theme: {
        type: import('vue').PropType<string | string[]>;
    };
    content: {
        type: import('vue').PropType<string>;
        required: true;
        default: string;
    };
    placement: {
        type: import('vue').PropType<"top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "right-start" | "right-center" | "right-end" | "left-start" | "left-center" | "left-end">;
        default: string;
    };
    showTriangle: {
        type: import('vue').PropType<boolean>;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    content: string;
    placement: "top-start" | "top-center" | "top-end" | "bottom-start" | "bottom-center" | "bottom-end" | "left-start" | "left-center" | "left-end" | "right-start" | "right-center" | "right-end";
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
        content?(_: {}): any;
    };
}) & import('vue').Plugin;
