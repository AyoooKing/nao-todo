import { w as e } from "./utils-D3GAsA1N.js";
import { defineComponent as i, ref as r, computed as l, onMounted as t, openBlock as o, createElementBlock as s, normalizeStyle as a, createElementVNode as n, renderSlot as d, createCommentVNode as g } from "vue";
const f = { class: "infinite-scroll" }, c = { key: 0, class: "infinite-scroll__loading" }, p = { key: 1, class: "infinite-scroll__disabled" }, u = e(i({ name: "NueInfiniteScroll", __name: "infinite-scroll", props: { triggerHeight: { default: "150px" }, height: {}, disabled: { type: Boolean, default: false }, loading: { type: Boolean, default: false }, root: {}, rootMargin: {}, threshold: {} }, emits: ["loadMore"], setup(e2, { emit: i2 }) {
  const u2 = e2, h = i2, v = r(), _ = r(), b = r(), m = l(() => ({ "--height": u2.height, "--trigger-bar-height": u2.triggerHeight }));
  return t(() => {
    const e3 = _.value, { root: i3, rootMargin: r2, threshold: l2 } = u2;
    e3 && (b.value = new IntersectionObserver((e4) => {
      u2.disabled || e4[0].isIntersecting && h("loadMore");
    }, { root: "wrapper" === i3 ? v.value : i3, rootMargin: r2, threshold: l2 }), b.value.observe(e3));
  }), (e3, i3) => (o(), s("div", { ref_key: "wrapperRef", ref: v, style: a(m.value), class: "infinite-scroll-wrapper" }, [n("div", f, [d(e3.$slots, "default"), n("div", { ref_key: "triggerBarRef", ref: _, class: "infinite-scroll__trigger-bar" }, null, 512), e3.loading ? (o(), s("div", c, [d(e3.$slots, "loading", {}, () => [i3[0] || (i3[0] = n("span", null, "Loading...", -1))])])) : g("", true), e3.disabled && !e3.loading ? (o(), s("div", p, [d(e3.$slots, "disabled", {}, () => [i3[1] || (i3[1] = n("span", null, "-- No more data --", -1))])])) : g("", true)])], 4));
} }));
export {
  u as N
};
