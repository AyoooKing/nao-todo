import { p as e, w as t } from "./utils-D3GAsA1N.js";
import { defineComponent as a, ref as i, computed as s, watch as l, openBlock as o, createElementBlock as u, normalizeClass as n, withModifiers as c, createElementVNode as d, createBlock as r, unref as p, createCommentVNode as v, renderSlot as h, createTextVNode as m, toDisplayString as f } from "vue";
import { N as w } from "./icon-DKepx2gf.js";
import { i as y } from "./vendor-DtiFC3Pk.js";
const x = { class: "nue-switch__circle" }, _ = { key: 0, class: "nue-switch__text" }, g = t(a({ name: "NueSwitch", __name: "switch", props: { modelValue: { type: Boolean }, size: {}, disabled: { type: Boolean, default: false }, loading: { type: Boolean, default: false }, showText: { type: Boolean, default: false }, activeText: { default: "I" }, inactiveText: { default: "O" }, beforeSwitch: {}, theme: {} }, emits: ["update:modelValue", "change"], setup(t2, { emit: a2 }) {
  const g2 = t2, T = a2, b = i(false), $ = i(), k = s(() => {
    const { size: t3, theme: a3, disabled: i2 } = g2;
    let s2 = [];
    const l2 = "nue-switch";
    return s2.push(l2), a3 && (s2 = s2.concat(e(a3, l2))), b.value && s2.push(`${l2}--actived`), t3 && s2.push(`${l2}--${t3}`), i2 && s2.push(`${l2}--disabled`), s2;
  }), B = async () => {
    const { loading: e2, disabled: t3, beforeSwitch: a3 } = g2;
    if (!e2 && !t3) {
      if (y(a3)) try {
        if (!await a3(b.value)) return;
      } catch (e3) {
        return e3;
      }
      V();
    }
  }, V = () => {
    b.value = !b.value, T("update:modelValue", b.value), T("change", b.value);
  };
  return l(() => g2.modelValue, (e2) => b.value = e2, { immediate: true }), l(() => b.value, () => {
    setTimeout(() => {
      $.value && $.value.style.setProperty("--state-width", `${$.value.clientWidth}px`);
    });
  }), (e2, t3) => (o(), u("div", { ref_key: "switchRef", ref: $, class: n(k.value), onClick: c(B, ["stop"]) }, [d("div", x, [e2.loading ? (o(), r(p(w), { key: 0, class: "nue-switch__loading-icon", name: "loading", spin: "" })) : v("", true)]), e2.showText ? (o(), u("div", _, [h(e2.$slots, "default", {}, () => [m(f(b.value ? e2.activeText : e2.inactiveText), 1)])])) : v("", true)], 2));
} }));
export {
  g as N
};
