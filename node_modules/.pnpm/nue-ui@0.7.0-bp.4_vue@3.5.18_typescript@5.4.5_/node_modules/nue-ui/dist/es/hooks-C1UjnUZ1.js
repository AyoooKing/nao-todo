import { ref as e, reactive as t, nextTick as r } from "vue";
const p = (t2) => {
  const r2 = e(t2);
  return [r2, () => {
    r2.value = !r2.value;
  }, (e2) => {
    r2.value = e2;
  }];
}, a = (r2, p2, a2) => {
  const l2 = e(a2.placement || "top-center"), i = t({ popperWidth: 0, popperHeight: 0, wrapperX: 0, wrapperY: 0, wrapperWidth: 0, wrapperHeight: 0 }), s = () => {
    var _a, _b;
    const e2 = (_a = p2.value) == null ? void 0 : _a.getBoundingClientRect(), t2 = (_b = r2.value) == null ? void 0 : _b.getBoundingClientRect();
    i.popperWidth = (e2 == null ? void 0 : e2.width) || 0, i.popperHeight = (e2 == null ? void 0 : e2.height) || 0, i.wrapperX = (t2 == null ? void 0 : t2.x) || 0, i.wrapperY = (t2 == null ? void 0 : t2.y) || 0, i.wrapperWidth = (t2 == null ? void 0 : t2.width) || 0, i.wrapperHeight = (t2 == null ? void 0 : t2.height) || 0;
  }, o = (e2, t2) => {
    const [r3, p3] = l2.value.split("-"), a3 = (e2 ?? r3) + "-" + (t2 ?? p3);
    l2.value = a3;
  }, n = (e2) => {
    const t2 = p2.value;
    if (!t2) return;
    if (s(), e2 && (l2.value = e2), (() => {
      const [e3, t3] = l2.value.split("-"), { popperWidth: r4, popperHeight: p3, wrapperX: a4, wrapperY: s2, wrapperWidth: n2, wrapperHeight: c2 } = i;
      switch (e3) {
        case "top":
          if (s2 - p3 < 8) return o("bottom"), true;
          break;
        case "bottom":
          if (s2 + c2 + p3 > window.innerHeight - 8) return o("top"), true;
          break;
        case "left":
          if (a4 - r4 < 8) return o("right"), true;
          break;
        case "right":
          if (a4 + n2 + r4 > window.innerWidth - 8) return o("left"), true;
      }
      switch (t3) {
        case "start":
          if (a4 + r4 > window.innerWidth - 8) return o(void 0, "center"), true;
          break;
        case "end":
          if (a4 < 8) return o(void 0, "center"), true;
          break;
        case "center":
          if (a4 + r4 > window.innerWidth - 8) return o(void 0, "end"), true;
          if (a4 < 8) return o(void 0, "start"), true;
      }
      return false;
    })()) return void n();
    const { popperWidth: r3, popperHeight: a3, wrapperX: c, wrapperY: u, wrapperWidth: h, wrapperHeight: d } = i;
    switch (l2.value) {
      case "top-center":
        t2.style.left = c + h / 2 - r3 / 2 + "px", t2.style.top = u - a3 - 8 + "px";
        break;
      case "top-start":
        t2.style.left = `${c}px`, t2.style.top = u - a3 - 8 + "px";
        break;
      case "top-end":
        t2.style.left = c + h - r3 + "px", t2.style.top = u - a3 - 8 + "px";
        break;
      case "bottom-center":
        t2.style.left = c + h / 2 - r3 / 2 + "px", t2.style.top = `${u + d + 8}px`;
        break;
      case "bottom-start":
        t2.style.left = `${c}px`, t2.style.top = `${u + d + 8}px`;
        break;
      case "bottom-end":
        t2.style.left = c + h - r3 + "px", t2.style.top = `${u + d + 8}px`;
        break;
      case "left-center":
        t2.style.left = c - r3 - 8 + "px", t2.style.top = u + d / 2 - a3 / 2 + "px";
        break;
      case "left-start":
        t2.style.left = c - r3 - 8 + "px", t2.style.top = `${u}px`;
        break;
      case "left-end":
        t2.style.left = c - r3 - 8 + "px", t2.style.top = u + d - a3 + "px";
        break;
      case "right-center":
        t2.style.left = `${c + h + 8}px`, t2.style.top = u + d / 2 - a3 / 2 + "px";
        break;
      case "right-start":
        t2.style.left = `${c + h + 8}px`, t2.style.top = `${u}px`;
        break;
      case "right-end":
        t2.style.left = `${c + h + 8}px`, t2.style.top = u + d - a3 + "px";
    }
  };
  return { rectInfo: i, placement: l2, getRectInfo: s, calculatePosition: n };
}, l = (e2) => {
  let t2 = null;
  return { show: (p2, a2) => {
    t2 && (clearTimeout(t2), t2 = null), p2 && p2(), e2.value = true, r(() => {
      a2 && a2();
    });
  }, hide: (r2, p2, a2) => {
    t2 && (clearTimeout(t2), t2 = null), t2 = setTimeout(() => {
      p2 && p2(), setTimeout(() => {
        e2.value = false, a2 && a2(), t2 = null;
      }, r2 || 160);
    });
  } };
};
export {
  l as a,
  p as b,
  a as u
};
